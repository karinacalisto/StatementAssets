// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Statement.Data.DbContexts.Context;

#nullable disable

namespace Statement.Data.Migrations
{
    [DbContext(typeof(StatementDbContext))]
    [Migration("20250309144531_NomeDaMigracao")]
    partial class NomeDaMigracao
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Statement.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accountname");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("accountnumber");

                    b.Property<string>("Agency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("agency");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int>("DAC")
                        .HasColumnType("integer")
                        .HasColumnName("dac");

                    b.Property<string>("Data")
                        .HasColumnType("JSONB")
                        .HasColumnName("data");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("boolean")
                        .HasColumnName("isdraft");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("accounts", "statement");
                });

            modelBuilder.Entity("Statement.Entities.CashComposition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("InvestedBalance")
                        .HasColumnType("numeric")
                        .HasColumnName("investedbalance");

                    b.Property<int>("ProductCode")
                        .HasColumnType("integer")
                        .HasColumnName("productcode");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("productname");

                    b.HasKey("Id");

                    b.ToTable("cash_composition", "statement");
                });

            modelBuilder.Entity("Statement.Entities.Investments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("accountid");

                    b.Property<DateTimeOffset>("InvestedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("investedat");

                    b.Property<decimal>("InvestedBalance")
                        .HasColumnType("decimal(18, 2)")
                        .HasColumnName("investedbalance");

                    b.Property<int>("ProductCode")
                        .HasColumnType("integer")
                        .HasColumnName("productcode");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid")
                        .HasColumnName("productid");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("productname");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("investments", "statement");
                });

            modelBuilder.Entity("Statement.Entities.Investments", b =>
                {
                    b.HasOne("Statement.Entities.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Statement.Entities.CashComposition", "CashComposition")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("CashComposition");
                });
#pragma warning restore 612, 618
        }
    }
}
